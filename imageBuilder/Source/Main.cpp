/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "errorlog.h"
#include "Parser.h"


//==============================================================================
int main (int argc, char* argv[])
{
    
    if (argc < 3)
    {
        std::cout << "Not enough parameters. Usage: ImageBuilder <inputFolder> <outputFolder>" << newLine;
        return 0;
    }
    
    String inputFolder = String(argv[1]);
    String outputFolder = String(argv[2]);

    File in = File::getCurrentWorkingDirectory().getChildFile(inputFolder);
    if (!in.isDirectory() || !in.exists())
    {
        std::cout << "The input folder '" + inputFolder + "' doesn't exist or is not a directory." << newLine;
        return 0;
    }
    
    File out = File::getCurrentWorkingDirectory().getChildFile(outputFolder);
    if (!out.isDirectory() || !out.exists())
    {
        std::cout << "The output folder '" + outputFolder + "' doesn't exist or is not a directory." << newLine;
        
        char input[1];
        std::cout << "Do you want the folder to be created? [y]/n >>";
        int result = scanf("%1c", input);
        if (*input == 'y' || *input == 'Y' || result == 0)
        {
            std::cout << "Creating Directory..." << newLine;
            out.createDirectory();
        }
        else
            return 0;
    }
    
    
    if (!out.getChildFile("fonts.h").existsAsFile())
    {
        std::cout << "Output file 'fonts.h' doesn't exist. I'm creating a blank one." << newLine;
        String content = String("#include <tinyglcd_fonts.h>") + newLine + "// START__"+ newLine + " // END__" + newLine;
        juce::FileOutputStream outStream (out.getChildFile("fonts.h"));
        outStream << content;
    }
    if (!out.getChildFile("fonts.c").existsAsFile())
    {
        std::cout << "Output file 'fonts.c' doesn't exist. I'm creating a blank one." << newLine;
        String content = String("#include \"fonts.h\"") + newLine + "// START__"+ newLine + " // END__" + newLine;
        juce::FileOutputStream outStream (out.getChildFile("fonts.c"));
        outStream << content;
    }
    if (!out.getChildFile("images.h").existsAsFile())
    {
        std::cout << "Output file 'images.h' doesn't exist. I'm creating a blank one." << newLine;
        String content = String("#include <tinyglcd_images.h>") + newLine + "// START__"+ newLine + " // END__" + newLine;
        juce::FileOutputStream outStream (out.getChildFile("images.h"));
        outStream << content;
    }
    if (!out.getChildFile("images.c").existsAsFile())
    {
        std::cout << "Output file 'images.c' doesn't exist. I'm creating a blank one." << newLine;
        String content = String("#include \"images.h\"") + newLine + "// START__"+ newLine + " // END__" + newLine;
        juce::FileOutputStream outStream (out.getChildFile("images.c"));
        outStream << content;
    }

    Parser parser;
    parser.parseFolder(in, out);
    while(parser.isRunning());
    
    std::cout << "Done." << newLine;
    
    ErrorLog::stopLog();
    
    return 0;
}
